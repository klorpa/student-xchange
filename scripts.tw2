::GeneralFunctions [script] <200,50>
setup.removeItem = function (arr, item) {
	var index = arr.indexOf(item)
	if (index < 0) {
		return arr
	} else {
  	return arr.splice(0,index).concat(arr.splice(index+1))
	}
}

setup.addIfNeeded = function (arr, item) {
	var index = arr.indexOf(item)
	if (index < 0) {
		return arr.concat([item])
	} else {
		return arr
	}
}

::AutoNav [script] <250,50>
var IntervalID = setInterval(UpdateLinks, 300);

$(document).on(':passageend', function (ev) {
	clearInterval(IntervalID);
	IntervalID = setInterval(UpdateLinks, 300);  // Triggers UpdateLinks() 300ms after the passage is rendered.
});

// Search passages for links every 300ms and marks them for key clicks
function UpdateLinks() {
	if (Engine.isIdle()) {
		var Links = $("#passages a");
		if (Links.length === 1) {
			Links[0].id = "NextLink";
		} else if (Links.length >= 1 && Links.length <= 10) {
			var n = 1;
			for (var i = 0; i < Links.length; i++) {
				if (!Links[i].id.includes("Link")) {
					while ($('#Link' + n).length) {
						++n;
						if (n > 10) {
							break;
						}
					}

					if (n < 10) {
						$("<sup>[" + n + "]</sup>").appendTo(Links[i]);
						Links[i].id = "Link" + n;
					} else if (n === 10) {
						$("<sup>[0]</sup>").appendTo(Links[i]);
						Links[i].id = "Link0";
					}
					if (n >= 10) {
						break;
					}
				}
			}
		}
	}
};

$(document).on('keyup', function (e) {
	// Trigger next link click on right arrow key
	if (((e.key == "ArrowRight") || (e.keyCode == 49) || (e.keyCode == 97)) && $('#NextLink') && (!tags().includes("DisableClick"))) {
		e.preventDefault();
		$('#NextLink').trigger('click');
	}

	// Trigger link click on keys "0" through "9"
	if ((e.keyCode > 47) && (e.keyCode < 58) && (!tags().includes("DisableClick"))) {
		if ($('#Link' + (e.keyCode - 48))) {
			e.preventDefault();
			$('#Link' + (e.keyCode - 48)).trigger('click');
		}
	}
	if ((e.keyCode > 95) && (e.keyCode < 106) && (!tags().includes("DisableClick"))) {
		if ($('#Link' + (e.keyCode - 96))) {
			e.preventDefault();
			$('#Link' + (e.keyCode - 96)).trigger('click');
		}
	}

	// Trigger random click on "." key
	if ((e.key == ".") && (!tags().includes("DisableClick"))) {
		e.preventDefault();
		var Links = $("#passages a");
		if (Links.length > 0) {
			Links[Math.floor(Math.random() * Links.length)].click();
		}
	}

	// Trigger back click on left arrow key
	if ((e.key == "ArrowLeft") && (!tags().includes("DisableClick"))) {
		e.preventDefault();
		Engine.backward();
	}
});

::SexFunctions [script] <300,50>
setup.sexCount = function () {
	return state.active.variables.sex.length
}

setup.sexMaleCount = function () {
	return state.active.variables.sex.filter(function(fuck) {return fuck.sex == 'male'}).length
}

setup.sexFemaleCount = function () {
	return state.active.variables.sex.filter(function(fuck) {return fuck.sex == 'female'}).length
}

setup.sexVaginalCount = function () {
	return state.active.variables.sex.filter(function(fuck) {return fuck.sex == 'male' && fuck.vaginal}).length
}

setup.sexUniquePartners = function (fucks) {
	var named = fucks.filter(function(fuck) {return fuck.name})
	var names = named.map(function(namedFuck) {return namedFuck.name})
	return Array.from(new Set(names))
}

setup.sexAllUniquePartners = function () {
	return setup.sexUniquePartners(state.active.variables.sex)
}

setup.sexUniqueCount = function (fucks) {
	var unnamed = fucks.filter(function(fuck) {return !fuck.name})
	return unnamed.length + setup.sexUniquePartners(fucks).length
}

setup.sexUniqueMaleCount = function () {
	return setup.sexUniqueCount(state.active.variables.sex.filter(function(fuck) {return fuck.sex == 'male' && !fuck.repeat}))
}

setup.sexUniqueFemaleCount = function () {
	return setup.sexUniqueCount(state.active.variables.sex.filter(function(fuck) {return fuck.sex == 'female' && !fuck.repeat}))
}

setup.sexUniqueVaginalCount = function () {
	return setup.sexUniqueCount(state.active.variables.sex.filter(function(fuck) {return fuck.sex == 'male' && fuck.vaginal && !fuck.repeat}))
}

setup.isGoldStarLesbian = function () {
	return setup.sexVaginalCount() == 0 && setup.sexFemaleCount() > 0
}

setup.getPartnerName = function(fuck) {
  if (fuck.name) {
    var kidnapperNote = (state.active.variables.KidnapEscape && fuck.name.indexOf("Kidnapper") >= 0) ? " (no memory)" : ""
    return fuck.name + kidnapperNote
  } else if (fuck.anon) {
    return "Some " + fuck.anon
  } else if (fuck.sex == 'male') {
    return "Some Guy"
  } else {
    return "Some Girl"
  }
}

setup.sexualHistoryTable = function () {
	if (!state.active.variables.sex || state.active.variables.sex.length == 0) {
		return "You are still a virgin.  You must be new here."
	}

	var st = "<table>\n<tr><th>Name / Description</th><th>M/F</th><th>Vaginal?</th><th>Birth Control</th><th>Pregnancy</th></tr>\n"
	state.active.variables.sex.forEach(function (fuck) {
		st += "<tr><td>"
    var partnerName = setup.getPartnerName(fuck)
    if (partnerName.indexOf("Some") >= 0) {
      st += "<i>(" + partnerName + ")</i>"
    } else {
      st += partnerName
    }
		st += "</td><td>" + fuck.sex + "</td><td>" + (fuck.vaginal ? "Y" : "") + "</td><td>"
			 + (fuck.vaginal ? fuck.birthControl : "")
			 + "</td><td>"
    if (fuck.conception) {
      if (fuck.aborted) {
        st += "(Aborted)"
      } else {
        st += "CONCEPTION"
      }
    } else if (fuck.checkedForPregnancy) {
      st += "no: " + fuck.checkedForPregnancy
    } else if (fuck.vaginal) {
      st += "?"
    }
    st += "</td></tr>\n"
	})
  return st + "</table>\n"
}


setup.haveFucked = function (name) {
	return state.active.variables.sex.filter(function(fuck) {return fuck.name == name || fuck.anon == name}).length > 0
} 

setup.haveFuckedVaginal = function (name) {
	// different than daddyCheck, since doesn't care about birth control
	return state.active.variables.sex.filter(function(fuck) {return fuck.vaginal && (fuck.name == name || fuck.anon == name)}).length > 0
} 

setup.fuckedVaginalCount = function (name) {
	return state.active.variables.sex.filter(function(fuck) {return fuck.vaginal && (fuck.name == name || fuck.anon == name)})
}

setup.addDetailsToRecentSex = function() {
	if (!state.active.variables.sex) return;

	state.active.variables.sex.forEach(function(fuck) {
		if(fuck.vaginal && !fuck.checkedForPregnancy) {
      if (!fuck.birthControl) {
        if (state.active.variables.PlayerPregnant) {
          fuck.birthControl = 'pregnant'
        } else if (state.active.variables.PlayerProtectionPerfect) {
          fuck.birthControl = 'implant-perfect'
        } else if (fuck.birthControlOverride) {
          fuck.birthControl = fuck.birthControlOverride
        } else if (state.active.variables.PlayerProtectionPermanent) {
          fuck.birthControl = 'implant-pill'
        } else if (state.active.variables.PlayerProtectionPill && !fuck.noPill) {
          fuck.birthControl = 'pill'
        } else if ((state.active.variables.PlayerProtectionCondoms && !fuck.noCondom) || fuck.condom) {
          fuck.birthControl = 'condom'
        } else if ((state.active.variables.PlayerProtectionWithdraw && !fuck.noPullout)  || fuck.pullout) {
          fuck.birthControl = 'pullout'
        } else {
          fuck.birthControl = 'none'
        }
      }

      if (fuck.birthControl == 'pregnant') {
        fuck.checkedForPregnancy = 'already pregnant'
      } else if (fuck.birthControl == 'implant-perfect') {
        fuck.checkedForPregnancy = 'perfect implant'
      } else if (fuck.birthControl == 'cycle') {
        fuck.checkedForPregnancy = 'on period'
      } else if (fuck.birthControl == 'vasectomy') {
        fuck.checkedForPregnancy = 'partner had vasectomy'
      }
		}
	})
}

setup.getPossibleConceptions = function() {
  setup.addDetailsToRecentSex()
  return state.active.variables.sex.filter(function(fuck) {
    return fuck.vaginal &&
      !fuck.checkedForPregnancy &&
      fuck.birthControl != 'pregnant' &&
      fuck.birthControl != 'implant-perfect' &&
      fuck.birthControl != 'cycle' &&
      fuck.birthControl != 'vasectomy'
  })
}

setup.notPregnant = function(reason) {
  setup.getPossibleConceptions().forEach(function(fuck) {
    fuck.checkedForPregnancy = reason
  })
}

setup.checkForPregnancy = function (fuck, oddsBoost, ovulationOverride) {
  var ovulationTableNormal = [
    0, 0, 0, 0, 0, 0, 0,
    0.1, 0.1, 0.2, 0.5, 0.5, 0.5, 0.5,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    0.5, 0.5, 0.5, 0.5, 0.2, 0.1, 0.1
  ]
  var ovulationTableExtraFertile = [
    0, 0, 0, 0.1, 0.1, 0.2, 0.2, 0.5,
    0.5, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 0.5, 0.2, 0.2, 0.1, 0.1
  ]
             
  var ovulationRoll = Math.floor(Math.random() * 28)
  var baseProbability
  if (ovulationOverride) {
    baseProbability = state.active.variables.PlayerProtectionFertile ? 1.0 : 0.6
  } else if (state.active.variables.PlayerProtectionFertile) {
    baseProbability = ovulationTableExtraFertile[ovulationRoll]
  } else {
    baseProbability = ovulationTableNormal[ovulationRoll]
  }

  var protectionFactor = 1.0
  if (fuck.birthControl == 'implant-pill') {
    protectionFactor = 0.02
  } else if (fuck.birthControl == 'pill' && fuck.name == 'Aaron') {
    protectionFactor = 0.02
  } else if (fuck.birthControl == 'pill') {
    protectionFactor = 0.05
  } else if (fuck.birthControl == 'condom') {
    protectionFactor = 0.1
  } else if (fuck.birthControl == 'pullout') {
    protectionFactor = 0.2
  }

  var conceptionRoll = Math.random() * baseProbability * protectionFactor
  return (conceptionRoll + oddsBoost) >= 0.5
}

setup.checkForNewPregnancy = function(pregnancyTestType, oddsBoost) {
  if (state.active.variables.PlayerPregnant) {
    return {isPregnant: false, possibleFathers: []} // already pregnant
  } else {
    var recentVaginal = setup.getPossibleConceptions()
    var possibleFathers = Array.from(new Set(recentVaginal.map(function(fuck) {
      return setup.getPartnerName(fuck)
    })))
    
    var isPregnant, actualFather, conceptionEvent
    recentVaginal.forEach(function(fuck) {
      if (isPregnant) {
        fuck.checkedForPregnancy = "already pregnant"
      } else {
				var areDefinitelyOvulating = (fuck.ovulating && !state.active.variables.PlayerProtectionPill) || fuck.noPill
        fuck.conception = setup.checkForPregnancy(fuck, oddsBoost, areDefinitelyOvulating)
        fuck.checkedForPregnancy = pregnancyTestType
        if (fuck.conception) {
          isPregnant = true // but player doesn't know yet, so don't set visible state variable
          conceptionEvent = fuck
          actualFather = setup.getPartnerName(fuck)
        }
      }
    })

    return {isPregnant, possibleFathers, actualFather, conceptionEvent, count: recentVaginal.length}
  }
}

::NeighbourFunctions [script] <350,50>
setup.addNeighbour = function (name) {
	return state.active.variables.neighbours.push(name)
}

setup.isNeighbour = function (name) {
	return state.active.variables.neighbours.indexOf(name) >= 0
}

setup.removeNeighbour = function (name) {
	state.active.variables.neighbours = setup.removeItem(state.active.variables.neighbours, name)
}

::DatingFunctions [script] <400,50>
setup.startDating = function (name) {
	state.active.variables.exes = setup.removeItem(state.active.variables.exes, name)
	state.active.variables.dating = setup.addIfNeeded(state.active.variables.dating, name)
	state.active.variables.fwb = setup.removeItem(state.active.variables.fwb, name)
	state.active.variables.friendzone = setup.removeItem(state.active.variables.friendzone, name)
}

setup.breakupWith = function (name) {
	state.active.variables.exes = setup.addIfNeeded(state.active.variables.exes, name)
	state.active.variables.dating = setup.removeItem(state.active.variables.dating, name)
	state.active.variables.fwb = setup.removeItem(state.active.variables.fwb, name)
	state.active.variables.friendzone = setup.removeItem(state.active.variables.friendzone, name)
}

setup.makeFWB = function(name) {
	state.active.variables.exes = setup.removeItem(state.active.variables.exes, name)
	state.active.variables.dating = setup.removeItem(state.active.variables.dating, name)
	state.active.variables.fwb = setup.addIfNeeded(state.active.variables.fwb, name)
	state.active.variables.friendzone = setup.removeItem(state.active.variables.friendzone, name)
}

setup.friendZone = function(name) {
	state.active.variables.exes = setup.removeItem(state.active.variables.exes, name)
	state.active.variables.dating = setup.removeItem(state.active.variables.dating, name)
	state.active.variables.fwb = setup.removeItem(state.active.variables.fwb, name)
	state.active.variables.friendzone = setup.addIfNeeded(state.active.variables.friendzone, name)
}

setup.areDating = function (name) {
	return state.active.variables.dating.indexOf(name) >= 0
}

setup.isEx = function (name) {
	return state.active.variables.exes.indexOf(name) >= 0
}

setup.haveDated = function (name) {
	return setup.areDating(name) || setup.isEx(name)
}

setup.isFWB = function(name) {
	return state.active.variables.fwb.indexOf(name) >= 0
}

setup.isFriendzoned = function(name) {
	return state.active.variables.friendzone.indexOf(name) >= 0
}

::EventFunctions [script] <400,50>
$(document).on(':passagestart', function (ev) {
	setup.addDetailsToRecentSex()
})
